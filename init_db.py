import os
from dotenv import load_dotenv # <-- 이 줄 추가
import psycopg2
import psycopg2.extras

# Render 등 외부 환경에서 DATABASE_URL을 자동으로 설정해줍니다.
# 로컬 테스트 시에는 직접 설정해야 할 수 있습니다.
load_dotenv() 
DATABASE_URL = os.environ.get('DATABASE_URL')
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL 환경변수를 설정해주세요.")

def init_db():
    """PostgreSQL 데이터베이스의 모든 테이블을 생성하고 초기 사용자를 추가합니다."""
    conn = psycopg2.connect(DATABASE_URL)
    try:
        with conn, conn.cursor() as cur:
            print("기존 테이블을 삭제합니다...")
            # CASCADE 옵션으로 의존성이 있는 테이블까지 모두 삭제
            cur.execute("DROP TABLE IF EXISTS PostReadStatus, Posts, Comments, Tasks, Projects, Users CASCADE;")

            print("새 테이블을 생성합니다...")
            cur.execute("""
                CREATE TABLE Users (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name TEXT NOT NULL UNIQUE
                );
            """)
            cur.execute("""
                CREATE TABLE Projects (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name TEXT NOT NULL,
                    user_id INTEGER REFERENCES Users(id) ON DELETE SET NULL,
                    start_date DATE NOT NULL,
                    deadline DATE,
                    priority INTEGER DEFAULT 2,
                    progress INTEGER DEFAULT 0,
                    status TEXT NOT NULL DEFAULT 'scheduled',
                    category TEXT NOT NULL DEFAULT '기타'
                );
            """)
            cur.execute("""
                CREATE TABLE Tasks (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    project_id INTEGER NOT NULL REFERENCES Projects(id) ON DELETE CASCADE,
                    content TEXT NOT NULL,
                    deadline DATE,
                    progress INTEGER DEFAULT 0,
                    is_current INTEGER DEFAULT 0,
                    task_order INTEGER DEFAULT 0
                );
            """)
            cur.execute("""
                CREATE TABLE Comments (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    project_id INTEGER NOT NULL REFERENCES Projects(id) ON DELETE CASCADE,
                    author_name TEXT NOT NULL,
                    content TEXT NOT NULL,
                    created_at TIMESTAMPTZ DEFAULT NOW()
                );
            """)
            cur.execute("""
                CREATE TABLE Posts (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    user_id INTEGER NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
                    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
                );
            """)
            cur.execute("""
                CREATE TABLE PostReadStatus (
                    user_id INTEGER NOT NULL REFERENCES Users(id) ON DELETE CASCADE,
                    post_id INTEGER NOT NULL REFERENCES Posts(id) ON DELETE CASCADE,
                    read_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
                    PRIMARY KEY (user_id, post_id)
                );
            """)

            print("초기 사용자를 추가합니다...")
            users = [('이재욱',), ('안호형',), ('안예준',), ('DI 팀',)]
            psycopg2.extras.execute_batch(cur, "INSERT INTO Users(name) VALUES (%s) ON CONFLICT (name) DO NOTHING", users)
            
            print("데이터베이스 초기화 완료.")
    finally:
        conn.close()

if __name__ == '__main__':
    init_db()